def rotate(o, a, b):
    return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0])

def jarvis_march(A):
    n = len(A)
    P = list(range(n))

    for i in range(1, n):
        if A[P[i]][0] < A[P[0]][0]:
            P[i], P[0] = P[0], P[i]

    H = [P[0]]
    del P[0]
    P.append(H[0])

    while True:
        right = 0
        for i in range(1, len(P)):
            if rotate(A[H[-1]], A[P[right]], A[P[i]]) < 0:
                right = i
        if P[right] == H[0]:
            break
        else:
            H.append(P[right])
            del P[right]

    return [A[i] for i in H]

A = [(0, 0), (1, 2), (2, 2), (2, 0), (3, 1), (3, 3), (1, 1)]
hull = jarvis_march(A)
print("Convex Hull:", hull)
